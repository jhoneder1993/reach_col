library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
usethis::use_r("comercio_replacements")
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
usethis::use_r("comercio_final_cleaning")
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
library(JmmiColombia)
usuario <- "jhon.montero@reach-initiative.org"
psw <- "T5*j_ae/z)WE"
servidorSMTP = "mail.acted.org"
puerto = 25
html_msg = "<html><body>"
library(emayili)
library(readxl)
html_msg = "<html><body>"
# Aquí los datos de la tabla se insertan en el texto del mensaje.
html_msg = paste0(html_msg, "<p>Hola Chicos,", ".</p>
<p>Espero se encuentren muy bien, perdón por utilizarlos como pruebas</p>")
html_msg = paste0(html_msg, "<p>Att.</p>")
html_msg = paste0(html_msg, "</p>
<p>Ernesto Pérez.</p>
</body></html>")
# Formateo final del mensaje.
html_msg = sprintf(html_msg)
email = envelope() %>%
from(usuario) %>%
to(c("jhon.montero@reach-initiative.org", "cesar.reyes@reach-initiative.org", "angie.martin@reach-initiative.org")) %>%
# Descomenta la siguiente línea para incluir una dirección de copia oculta bcc.
bcc("paola.gomez@reach-initiative.org") %>%
subject("Prueba Correo desde RStudio") %>%
# Aquí se añade el código HTML del mensaje.
html(html_msg)
smtp = gmail(username = usuario,
password = psw)
smtp(email, verbose = TRUE)
usuario <- "jhon.montero@reach-initiative.org"
psw <- "T5*j_ae/z)WE"
servidorSMTP = "mail.acted.org"
port = 25
html_msg = "<html><body>"
# Aquí los datos de la tabla se insertan en el texto del mensaje.
html_msg = paste0(html_msg, "<p>Hola Chicos,", ".</p>
<p>Espero se encuentren muy bien, perdón por utilizarlos como pruebas</p>")
html_msg = paste0(html_msg, "<p>Att.</p>")
html_msg = paste0(html_msg, "</p>
<p>Ernesto Pérez.</p>
</body></html>")
# Formateo final del mensaje.
html_msg = sprintf(html_msg)
email = envelope() %>%
from(usuario) %>%
to(c("jhon.montero@reach-initiative.org", "cesar.reyes@reach-initiative.org", "angie.martin@reach-initiative.org")) %>%
# Descomenta la siguiente línea para incluir una dirección de copia oculta bcc.
bcc("paola.gomez@reach-initiative.org") %>%
subject("Prueba Correo desde RStudio") %>%
# Aquí se añade el código HTML del mensaje.
html(html_msg)
smtp = gmail(host = servidorSMTP,
port = puerto,
username = usuario,
password = psw,
)
smtp(email, verbose = TRUE)
servidorSMTP = "mail.acted.org"
port = "25"
html_msg = "<html><body>"
# Aquí los datos de la tabla se insertan en el texto del mensaje.
html_msg = paste0(html_msg, "<p>Hola Chicos,", ".</p>
<p>Espero se encuentren muy bien, perdón por utilizarlos como pruebas</p>")
html_msg = paste0(html_msg, "<p>Att.</p>")
html_msg = paste0(html_msg, "</p>
<p>Ernesto Pérez.</p>
</body></html>")
# Formateo final del mensaje.
html_msg = sprintf(html_msg)
email = envelope() %>%
from(usuario) %>%
to(c("jhon.montero@reach-initiative.org", "cesar.reyes@reach-initiative.org", "angie.martin@reach-initiative.org")) %>%
# Descomenta la siguiente línea para incluir una dirección de copia oculta bcc.
bcc("paola.gomez@reach-initiative.org") %>%
subject("Prueba Correo desde RStudio") %>%
# Aquí se añade el código HTML del mensaje.
html(html_msg)
smtp = gmail(host = servidorSMTP,
port = puerto,
username = usuario,
password = psw,
)
smtp(email, verbose = TRUE)
usuario <- "jhon.montero@reach-initiative.org"
psw <- "T5*j_ae/z)WE"
servidorSMTP = "mail.acted.org"
port = "25"
html_msg = "<html><body>"
# Aquí los datos de la tabla se insertan en el texto del mensaje.
html_msg = paste0(html_msg, "<p>Hola Chicos,", ".</p>
<p>Espero se encuentren muy bien, perdón por utilizarlos como pruebas</p>")
html_msg = paste0(html_msg, "<p>Att.</p>")
html_msg = paste0(html_msg, "</p>
<p>Ernesto Pérez.</p>
</body></html>")
# Formateo final del mensaje.
html_msg = sprintf(html_msg)
email = envelope() %>%
from(usuario) %>%
to(c("jhon.montero@reach-initiative.org", "cesar.reyes@reach-initiative.org", "angie.martin@reach-initiative.org")) %>%
# Descomenta la siguiente línea para incluir una dirección de copia oculta bcc.
bcc("paola.gomez@reach-initiative.org") %>%
subject("Prueba Correo desde RStudio") %>%
# Aquí se añade el código HTML del mensaje.
html(html_msg)
smtp = server(host = servidorSMTP,
port = puerto,
username = usuario,
password = psw,
)
smtp(email, verbose = TRUE)
library(JmmiColombia)
library(JmmiColombia)
usethis::use_r("find_similar_surveys")
library(JmmiColombia)
usethis::use_r("r_excel")
use_git_config(user.name = "jhoneder1993", user.email = "jhoneder1993@gmail.com")
usethis::use_git_config(user.name = "jhoneder1993", user.email = "jhoneder1993@gmail.com")
usethis::use_r("kobo.df_to_r")
usethis::use_r("change_select_multiple")
kobo.df_to_r <- function(encuesta, choices, survey, label_name = "label"){
choices = choices %>% mutate(concated_column = paste(list_name, name, sep = ''))
xls1 = encuesta  # Cambiar a i
#pasar todo a character
xls1 <- setNames(data.frame(lapply(xls1, as.character)),
colnames(xls1))
#pasar los NA a *****
xls1 <- xls1 %>% mutate(across(everything(), ~replace_na(.x, "-----")))
#reemplazar los nombres de las variables
xls1 <- xls1 %>% rename_all(funs(str_replace_all(., "/", " ")))
dataset <- data.frame(Type = character(),
Choice = character(),
Nombre = character(),
Etiqueta = character())
##Colocar los nombres de la encuesta en fila
for (j in 1:ncol(xls1)) {
dataset <- dataset %>% add_row(Nombre = names(xls1[j]))
}
#Colocar el tipo de dato que es para despues obterner los labels
for (a in 1:nrow(dataset)) {
for (b in 1:nrow(survey)){
new_name <- str_split(dataset$Nombre[a], " ")
new_name <- new_name[[1]][1]
if (new_name == (replace_na(survey$name[b], ""))) {
dataset$Type[a] <- survey$type[b]
}
}
}
##Colocar choice
for (i in 1:nrow(dataset)) {
new_name <- str_split(dataset$Type[i], " ")
new_name <- new_name[[1]][2]
dataset$Choice[i] <- new_name
}
##Tipo select_one o select_multiple
for (i in 1:nrow(dataset)) {
if (str_detect(replace_na(dataset$Type[i], ""), "select_multiple")){
dataset$Type[i] <- "select_multiple"
}else if(str_detect(replace_na(dataset$Type[i], ""), "select_one")){
dataset$Type[i] <- "select_one"
}else {
dataset$Type[i] <- ""
}
}
##Colocar los dato del select_one para despues pasar de numero a el valor
for (i in 1:ncol(xls1)){
for (j in 1:nrow(dataset)){
if (names(xls1[i]) == dataset$Nombre[j] & dataset$Type[j] == "select_one"){
xls1[[i]] <- paste(dataset$Choice[j], xls1[[i]], sep = "")
}
}
}
## Colocar los dato del select_multiple para despues pasar de numero a el valor
for (i in 1:ncol(xls1)){
for (j in 1:nrow(dataset)){
if (names(xls1[i]) == dataset$Nombre[j] & dataset$Type[j] == "select_multiple" & !(names(xls1[i]) %ilike% " ")){
xls1[[i]] <- paste(dataset$Choice[j], xls1[[i]], sep = "")
}
}
}
# Completar los select_multiple, cambiar los espacios por el titulo
for (i in 1:ncol(xls1)){
for (j in 1:nrow(dataset)){
if (names(xls1[i]) == dataset$Nombre[j] & dataset$Type[j] == "select_multiple" & !(names(xls1[i]) %ilike% " ")){
# Se separa con // para hacerlo mas legible
xls1[[i]] <- gsub(" ", paste("  // ", dataset$Choice[j], sep = ""), xls1[[i]])
}
}
}
##Quitar los datos que tienen el nombre con NA
for (i in names(xls1)) {
xls1 <- xls1 %>% mutate(!!sym(i) := case_when(str_detect(!!sym(i), "-----") ~ NA_character_,
TRUE ~ !!sym(i)))
}
# Pasar los select multiples de numeros a los valores del cuestionario
multiple <- dataset %>% filter(Type == "select_multiple" & !(Nombre %ilike% " "))
for (i in 1:nrow(multiple)) {
filtro <- choices %>% filter(list_name == multiple[["Choice"]][i])
xls1[[multiple[["Nombre"]][i]]] <- paste(xls1[[multiple[["Nombre"]][i]]], " ", sep = "")
for (z in 1:nrow(filtro)){
xls1[[multiple[["Nombre"]][i]]] <- gsub(paste(filtro[["concated_column"]][z], " ", sep = ""), paste(filtro[[label_name]][z], "", sep = "") , xls1[[multiple[["Nombre"]][i]]])
# Ajustar los "NA " creados a NA
xls1[[multiple[["Nombre"]][i]]] <- gsub("NA ", NA, xls1[[multiple[["Nombre"]][i]]])
}
}
##############################################################################
## Pasar los datos restantes de numeros a los valores del cuestionario
xls2 <- xls1
multiple <- dataset %>% filter(Type != "select_multiple")
for (i in 1:nrow(multiple)) {
x <- round((i / nrow(multiple) * 100), 2)
if (x %% 5 == 0) {
print(paste(x, "% realizado", sep = ""))
}
filtro <- choices %>% filter(list_name == multiple[["Choice"]][i])
xls1[[multiple[["Nombre"]][i]]] <- paste(xls1[[multiple[["Nombre"]][i]]], " ", sep = "")
for (z in 1:nrow(filtro)){
xls1[[multiple[["Nombre"]][i]]] <- gsub(paste(filtro[["concated_column"]][z], " ", sep = ""), paste(filtro[[label_name]][z], "", sep = "") , xls1[[multiple[["Nombre"]][i]]])
# Ajustar los "NA " creados a NA
xls1[[multiple[["Nombre"]][i]]] <- gsub("NA ", NA, xls1[[multiple[["Nombre"]][i]]])
}
}
# Mach mas rapido pero si no se tienen todos los valores no sirve mucho
#for (i in names(xls1)) {
#  if(sum(is.na(choices[[label_name]][match(xls1[[i]],choices$concated_column)])) < ncol(xls1)){
#    xls1[i] <- choices[[label_name]][match(xls1[[i]],choices$concated_column)]
#  }
#}
#regresar los datos de espacio a /
xls1 <- xls1 %>% rename_all(funs(str_replace_all(., " ", "/")))
##Regrese la lista con los datos
cat("\n")
print("Funcion ejecutada con exito...")
return(xls1)
}
